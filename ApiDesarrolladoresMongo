from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import motor.motor_asyncio
from fastapi.responses import JSONResponse

app = FastAPI()

# Modelo de datos para un desarrollador
class Desarrollador(BaseModel):
    id: int
    nombre: str
    edad: int
    apellido: str
    pais: str
    habilidades: List[str]
    nivel_ingles: str

# Conexión a la base de datos
async def get_db():
    client = motor.motor_asyncio.AsyncIOMotorClient('mongodb://localhost:27017')
    db = client['MyDB']  # Asegúrate de usar el mismo nombre para la base de datos
    return db

# Insertar 5 desarrolladores iniciales si no existen
desarrolladores_iniciales = [
    Desarrollador(id=1, nombre="Juan", edad=30, apellido="Perez", pais="Mexico", habilidades=["Python", "Django"], nivel_ingles="Intermedio"),
    Desarrollador(id=2, nombre="Ana", edad=25, apellido="Gomez", pais="Argentina", habilidades=["JavaScript", "React"], nivel_ingles="Avanzado"),
    Desarrollador(id=3, nombre="Luis", edad=28, apellido="Martinez", pais="Colombia", habilidades=["Java", "Spring"], nivel_ingles="Básico"),
    Desarrollador(id=4, nombre="Maria", edad=32, apellido="Lopez", pais="España", habilidades=["PHP", "Laravel"], nivel_ingles="Intermedio"),
    Desarrollador(id=5, nombre="Carlos", edad=27, apellido="Garcia", pais="Chile", habilidades=["Ruby", "Rails"], nivel_ingles="Avanzado"),
]

@app.on_event("startup")
async def startup_db_client():
    db = await get_db()
    collection = db.desarrolladores
    existing_count = await collection.count_documents({})
    if existing_count == 0:
        await collection.insert_many([desarrollador.dict() for desarrollador in desarrolladores_iniciales])

@app.get("/desarrolladores", response_model=List[Desarrollador])
async def obtener_desarrolladores():
    db = await get_db()
    desarrolladores = await db.desarrolladores.find().to_list(1000)
    return desarrolladores

@app.post("/desarrolladores", response_model=Desarrollador)
async def crear_desarrollador(desarrollador: Desarrollador):
    db = await get_db()
    existing = await db.desarrolladores.find_one({"id": desarrollador.id})
    if existing:
        raise HTTPException(status_code=400, detail="ID de desarrollador ya existe")
    await db.desarrolladores.insert_one(desarrollador.dict())
    return desarrollador

@app.get("/desarrolladores/{desarrollador_id}", response_model=Desarrollador)
async def obtener_desarrollador(desarrollador_id: int):
    db = await get_db()
    desarrollador = await db.desarrolladores.find_one({"id": desarrollador_id})
    if desarrollador:
        return desarrollador
    raise HTTPException(status_code=404, detail="Desarrollador no encontrado")

@app.delete("/desarrolladores/{desarrollador_id}", response_model=Desarrollador)
async def eliminar_desarrollador(desarrollador_id: int):
    db = await get_db()
    desarrollador = await db.desarrolladores.find_one({"id": desarrollador_id})
    if desarrollador:
        await db.desarrolladores.delete_one({"id": desarrollador_id})
        return desarrollador
    raise HTTPException(status_code=404, detail="Desarrollador no encontrado")

@app.on_event("shutdown")
async def shutdown_db_client():
    db = await get_db()
    db.client.close()
